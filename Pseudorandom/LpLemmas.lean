import LeanAPAP.Prereqs.Discrete.LpNorm.Compact

variable
   {Œ± : Type*} [Œ±nonempty: Nonempty Œ±] [Fintype Œ±] [AddCommGroup Œ±]
   {Œ≤ : Type*} [Nonempty Œ≤] [Fintype Œ≤] [AddCommGroup Œ≤]
   [RCLike ùïú]
   (a b : Œ± ‚Üí ùïú)

open Real Finset

open scoped NNReal BigOps

theorem l1Norm_le_sqrt_card_mul_l2Norm :
  ‚Äña‚Äñ_[1] ‚â§ Real.sqrt (Fintype.card Œ±) * ‚Äña‚Äñ_[2] := calc
    ‚Äña‚Äñ_[1] = ‚Äñ1 * a‚Äñ_[1] := by simp
    _ ‚â§ ‚Äñ1‚Äñ_[(2 : NNReal)] * ‚Äña‚Äñ_[2] := by
      apply l1Norm_mul_le
      rw [NNReal.isConjExponent_iff_eq_conjExponent]
      rw [NNReal.sub_def]
      norm_num
      norm_num
    _ = Real.sqrt (Fintype.card Œ±) * ‚Äña‚Äñ_[2] := by
      congr
      rw [lpNorm_one (p := 2), Real.sqrt_eq_rpow]
      norm_num
      norm_num

lemma lpNorm_eq_card_rpow_mul_nlpNorm (p : NNReal) (hp : p ‚â† 0) :
    ‚Äña‚Äñ_[p] = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ‚Çô_[p] := calc
  ‚Äña‚Äñ_[p] = (‚àë i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := lpNorm_eq_sum hp ..
  _ = (Fintype.card Œ± * ùîº i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    simp only [Fintype.card_mul_expect]
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * (ùîº i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    rw [mul_rpow]
    simp
    apply expect_nonneg
    intros
    apply rpow_nonneg
    simp
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ‚Çô_[p] := by
    rw [nlpNorm_eq_expect hp]

lemma lpNorm_le_card_rpow_mul_linftyNorm (p : NNReal) (hp : p ‚â† 0) :
    ‚Äña‚Äñ_[p] ‚â§ (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ_[‚ä§] := calc
  ‚Äña‚Äñ_[p] = (‚àë i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := lpNorm_eq_sum hp ..
  _ ‚â§ (‚àë __, ‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    gcongr with i
    rw [linftyNorm_eq_ciSup]
    apply le_ciSup (c := i)
    simp [Set.Finite.bddAbove, Set.finite_range]
  _ = (Fintype.card Œ± * ‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    simp; rfl
  _ ‚â§ (Fintype.card Œ±)^(p.toReal‚Åª¬π) * (‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    rw [mul_rpow]
    simp
    apply rpow_nonneg
    simp
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ_[‚ä§] := by
    congr
    rw [‚Üê rpow_mul]
    field_simp
    simp

lemma l2Inner_le_l1Norm_mul_linftyNorm :
    ‚Äñ‚ü™a, b‚ü´_[ùïú]‚Äñ ‚â§ ‚Äña‚Äñ_[1] * ‚Äñb‚Äñ_[‚ä§] := by
  rw [l2Inner, l1Norm_eq_sum, sum_mul]
  refine (norm_sum_le ..).trans ?_
  apply sum_le_sum
  intro i _
  simp only [norm_mul, RingHomIsometric.is_iso]
  gcongr
  rw [linftyNorm_eq_ciSup]
  apply le_ciSup (c := i)
  simp [Set.Finite.bddAbove, Set.finite_range]

lemma l2Norm_le_sqrt_l1Norm_mul_linftyNorm (a : Œ± ‚Üí ‚Ñù) :
    ‚Äña‚Äñ_[2] ‚â§ Real.sqrt (‚Äña‚Äñ_[1] * ‚Äña‚Äñ_[‚ä§]) := by
  rw [Real.le_sqrt]
  convert_to ‚ü™a, a‚ü´_[‚Ñù] ‚â§ ‚Äña‚Äñ_[1] * ‚Äña‚Äñ_[‚ä§]
  simp
  convert l2Inner_le_l1Norm_mul_linftyNorm a a
  simp
  simp
  apply mul_nonneg <;> simp
