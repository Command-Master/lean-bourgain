import Mathlib.Algebra.BigOperators.Basic
import Mathlib.Algebra.BigOperators.Ring
import LeanAPAP.Prereqs.Expect.Basic

open Finset BigOps

variable {Œ± Œ≤ Œ≥ : Type*} [Fintype Œ±] [DecidableEq Œ≤]

noncomputable def transfer [AddCommMonoid Œ≥] (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥) : (Œ≤ ‚Üí Œ≥) :=
  (fun x => ‚àë y in univ.filter (fun y => f y = x), g y)

infixr:75 " # " => transfer

theorem transfer_add [AddCommMonoid Œ≥] (f : Œ± ‚Üí Œ≤) (g h : Œ± ‚Üí Œ≥) :
  f # (g + h) = f # g + f # h := by
  unfold transfer
  ext a
  simp [sum_add_distrib]

theorem comp_transfer [AddCommMonoid Œ≥] [AddCommMonoid Œ≥‚ÇÇ] [FunLike G Œ≥ Œ≥‚ÇÇ] [AddMonoidHomClass G Œ≥ Œ≥‚ÇÇ]
    (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥) (h : G):
  h ‚àò (f # g) = f # (h ‚àò g) := by
  unfold transfer
  ext a
  simp

theorem transfer_transfer [AddCommMonoid Œ≥] [Fintype Œ≤] [DecidableEq Œ≥‚ÇÇ]
    (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥) (h : Œ≤ ‚Üí Œ≥‚ÇÇ):
  h # (f # g) = (h ‚àò f) # g := by
  unfold transfer
  ext a
  simp
  rw [Finset.sum_comm' (t' := univ.filter fun y => (h (f y)) = a) (s' := fun x => {f x})]
  simp
  aesop


theorem transfer_id (f : Œ± ‚Üí Œ≤) [DecidableEq Œ±] [AddCommMonoid Œ≤]:
  id # f = f := by
  unfold transfer
  ext a
  simp [Finset.filter_eq']

theorem transfer_sub [SubtractionCommMonoid Œ≥] (f : Œ± ‚Üí Œ≤) (g h : Œ± ‚Üí Œ≥) :
  f # (g - h) = f # g - f # h := by
  unfold transfer
  ext a
  simp

theorem transfer_sum [Fintype Œ≤] [Semiring Œ≥] (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥) (h : Œ≤ ‚Üí Œ≥):
  ‚àë x, (f # g) x * h x = ‚àë x, (g x) * (h (f x)) := by
  unfold transfer
  simp_rw [sum_mul]
  conv =>
    lhs
    rhs
    intro x
    tactic =>
      apply sum_congr
      rfl
      intro i hi
      simp only [filter_congr_decidable, mem_filter, mem_univ, true_and] at hi
      change _ = g i * h (f i)
      congr
      exact hi.symm
  rw [sum_fiberwise]

theorem transfer_expect [Fintype Œ≤] [Semiring Œ≥] [Module NNRat Œ≥] [Nonempty Œ≤] [Nonempty Œ±]
   (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥) (h : Œ≤ ‚Üí Œ≥):
  ùîº x, (f # g) x * h x = ((Fintype.card Œ±) / (Fintype.card Œ≤) : NNRat) ‚Ä¢ ùîº x, (g x) * (h (f x)) := by
  rw [expect, expect, transfer_sum, ‚Üê smul_assoc]
  congr
  field_simp
  rw [mul_comm]; rfl

theorem transfer_ne_zero [AddCommMonoid Œ≥] (f : Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≥) (x : Œ≤)
    (h : (f # g) x ‚â† 0) : ‚àÉ i, x = f i := by
  contrapose h
  unfold transfer
  simp only [filter_congr_decidable, ne_eq, not_not]
  simp only [not_exists] at h
  convert Finset.sum_empty
  apply eq_empty_of_forall_not_mem
  intro x1
  simp only [mem_filter, mem_univ, true_and]
  exact Ne.symm (h x1)
