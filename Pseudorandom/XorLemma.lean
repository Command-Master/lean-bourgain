import Pseudorandom.SD
import Mathlib.RingTheory.RootsOfUnity.Complex
import Mathlib.Analysis.SpecialFunctions.Log.Base
import Mathlib.Algebra.Order.Chebyshev
import LeanAPAP.Prereqs.Discrete.DFT.Compact
import LeanAPAP.Prereqs.Expect.Basic

open Classical Real Finset BigOps

variable
   {Œ± : Type*} [Œ±nonempty: Nonempty Œ±] [Fintype Œ±] [AddCommGroup Œ±]
   {Œ≤ : Type*} [Nonempty Œ≤] [Fintype Œ≤] [AddCommGroup Œ≤]
   [RCLike ùïú]
   (a b : Œ± ‚Üí ùïú)

open scoped NNReal

-- The DFT isn't normalized.
theorem l1Norm_le_sqrt_card_mul_l2Norm :
  ‚Äña‚Äñ_[1] ‚â§ Real.sqrt (Fintype.card Œ±) * ‚Äña‚Äñ_[2] := calc
    ‚Äña‚Äñ_[1] = ‚Äñ1 * a‚Äñ_[1] := by simp
    _ ‚â§ ‚Äñ1‚Äñ_[(2 : NNReal)] * ‚Äña‚Äñ_[2] := by
      apply l1Norm_mul_le
      rw [NNReal.isConjExponent_iff_eq_conjExponent]
      rw [NNReal.sub_def]
      norm_num
      norm_num
    _ = Real.sqrt (Fintype.card Œ±) * ‚Äña‚Äñ_[2] := by
      congr
      rw [lpNorm_one (p := 2), Real.sqrt_eq_rpow]
      norm_num
      norm_num

lemma lpNorm_eq_card_rpow_mul_nlpNorm (p : NNReal) (hp : p ‚â† 0) :
    ‚Äña‚Äñ_[p] = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ‚Çô_[p] := calc
  ‚Äña‚Äñ_[p] = (‚àë i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := lpNorm_eq_sum hp ..
  _ = (Fintype.card Œ± * ùîº i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    simp only [Fintype.card_mul_expect]
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * (ùîº i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    rw [mul_rpow]
    simp
    apply expect_nonneg
    intros
    apply rpow_nonneg
    simp
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ‚Çô_[p] := by
    rw [nlpNorm_eq_expect hp]

lemma lpNorm_le_card_rpow_mul_linftyNorm (p : NNReal) (hp : p ‚â† 0) :
    ‚Äña‚Äñ_[p] ‚â§ (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ_[‚ä§] := calc
  ‚Äña‚Äñ_[p] = (‚àë i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := lpNorm_eq_sum hp ..
  _ ‚â§ (‚àë __, ‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    gcongr with i
    rw [linftyNorm_eq_ciSup]
    apply le_ciSup (c := i)
    simp [Set.Finite.bddAbove, Set.finite_range]
  _ = (Fintype.card Œ± * ‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    simp; rfl
  _ ‚â§ (Fintype.card Œ±)^(p.toReal‚Åª¬π) * (‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    rw [mul_rpow]
    simp
    apply rpow_nonneg
    simp
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ_[‚ä§] := by
    congr
    rw [‚Üê rpow_mul]
    field_simp
    simp

lemma l2Inner_le_l1Norm_mul_linftyNorm :
    ‚Äñ‚ü™a, b‚ü´_[ùïú]‚Äñ ‚â§ ‚Äña‚Äñ_[1] * ‚Äñb‚Äñ_[‚ä§] := by
  rw [l2Inner, l1Norm_eq_sum, sum_mul]
  refine (norm_sum_le ..).trans ?_
  apply sum_le_sum
  intro i _
  simp only [norm_mul, RingHomIsometric.is_iso]
  gcongr
  rw [linftyNorm_eq_ciSup]
  apply le_ciSup (c := i)
  simp [Set.Finite.bddAbove, Set.finite_range]

variable
   (a b : Œ± ‚Üí ‚Ñù)

theorem L1_le_card_rpow_mul_dft_norm :
    ‚Äña‚Äñ_[1] ‚â§ ((Fintype.card Œ±)^(3/2 : ‚Ñù) : ‚Ñù) * ‚Äñcft (a ¬∑)‚Äñ_[‚ä§] :=
  calc
    ‚Äña‚Äñ_[1] ‚â§ Real.sqrt (Fintype.card Œ±) * ‚Äña‚Äñ_[(2 : NNReal)] := l1Norm_le_sqrt_card_mul_l2Norm ..
    _ = (Fintype.card Œ±) * ‚Äña‚Äñ‚Çô_[2] := by
      rw [lpNorm_eq_card_rpow_mul_nlpNorm]
      rw [‚Üê mul_assoc]
      congr
      rw [Real.sqrt_eq_rpow, ‚Üê rpow_add]
      norm_num
      simp [Fintype.card_pos]
      norm_num
    _ = (Fintype.card Œ±) * ‚Äñcft (a ¬∑)‚Äñ_[2] := by
      congr
      rw [l2Norm_cft, nlpNorm_eq_expect', nlpNorm_eq_expect']
      congr
      ext
      simp
      simp
      simp
    _ ‚â§ (Fintype.card Œ±) * (Real.sqrt (Fintype.card Œ±) * ‚Äñcft (a ¬∑)‚Äñ_[‚ä§]) := by
      gcongr
      rw [Real.sqrt_eq_rpow]
      convert lpNorm_le_card_rpow_mul_linftyNorm (cft (a ¬∑)) 2 (by norm_num) using 3
      simp
      simp
    _ = ((Fintype.card Œ±)^(3/2 : ‚Ñù) : ‚Ñù) * ‚Äñcft (a ¬∑)‚Äñ_[‚ä§] := by
      rw [sqrt_eq_rpow, ‚Üê mul_assoc, ‚Üê rpow_one_add']
      congr 1
      norm_num
      simp
      norm_num

lemma lemma43 (t Œµ : NNReal)
    (h : ‚àÄ œá : AddChar Œ± ‚ÑÇ, (AddChar.IsNontrivial œá) ‚Üí ‚Äñcft (a ¬∑) œá‚Äñ ‚â§ Œµ / (Fintype.card Œ±))
    (œÉ : Œ± ‚Üí Œ≤) (h‚ÇÇ : ‚àÄ œá : AddChar Œ≤ ‚ÑÇ,
      ‚Äñcft (œá ‚àò œÉ)‚Äñ_[1] ‚â§ t
    ):
    ‚ÄñœÉ # a - œÉ # (Function.const Œ± (ùîº x, a x))‚Äñ_[1] ‚â§ t * Œµ * Real.sqrt (Fintype.card Œ≤)
  := by
  suffices ‚Äñcft (fun x => (œÉ # a - œÉ # (Function.const Œ± (ùîº x, a x))) x)‚Äñ_[‚ä§] ‚â§ t * Œµ / (Fintype.card Œ≤) by
    calc ‚ÄñœÉ # a - œÉ # (Function.const Œ± (ùîº x, a x))‚Äñ_[1]
      _ ‚â§ (Fintype.card Œ≤)^(3/2 : ‚Ñù) * ‚Äñcft (fun x => (œÉ # a - œÉ # (Function.const Œ± (ùîº x, a x))) x)‚Äñ_[‚ä§] := L1_le_card_rpow_mul_dft_norm _
      _ ‚â§ (Fintype.card Œ≤)^(3/2 : ‚Ñù) * (t * Œµ / (Fintype.card Œ≤)) := by gcongr
      _ = t * Œµ * ((Fintype.card Œ≤)^(3/2 : ‚Ñù) / (Fintype.card Œ≤)) := by ring
      _ = t * Œµ * Real.sqrt (Fintype.card Œ≤) := by
        rw [sqrt_eq_rpow, ‚Üê rpow_sub_one]
        norm_num
        simp
  rw [linftyNorm_eq_ciSup]
  apply ciSup_le
  intro œá
  dsimp only [cft_apply, nl2Inner_eq_expect]
  simp_rw [‚Üê transfer_sub]
  change ‚Äñexpect _ fun i => _ * (Complex.ofReal ‚àò _) i‚Äñ ‚â§ _
  simp_rw [comp_transfer]
  conv =>
    lhs
    rhs
    rhs
    intro
    rw [mul_comm]
  rw [transfer_expect]
  simp_rw [mul_comm]
  rw [‚Üê nl2Inner_eq_expect]
  by_cases he : œá = 0
  ¬∑ simp only [he, AddChar.one_apply, Function.comp_apply, Pi.sub_apply, map_sub,
      Complex.ofReal_eq_coe, map_div‚ÇÄ, map_sum, map_natCast, Complex.norm_eq_abs]
    change Complex.abs (_ ‚Ä¢ nl2Inner (Function.const Œ± 1) _) ‚â§ _
    rw [nl2Inner_const_left]
    simp [expect_sub_distrib]
    positivity
  ¬∑ calc ‚Äñ(Fintype.card Œ± / Fintype.card Œ≤ : NNRat) ‚Ä¢ nl2Inner (œá ‚àò œÉ) (‚áëComplex.ofReal ‚àò (a - Function.const Œ± (expect univ fun x => a x)))‚Äñ
      _ = (Fintype.card Œ± / Fintype.card Œ≤ : ‚Ñù) * ‚Äñnl2Inner (œá ‚àò œÉ) (‚áëComplex.ofReal ‚àò (a - Function.const Œ± (expect univ fun x => a x)))‚Äñ := by
        rw [‚Üê nnratCast_smul_eq_nnqsmul ‚Ñù]
        simp
      _ = (Fintype.card Œ± / Fintype.card Œ≤ : ‚Ñù) * ‚Äñl2Inner (cft (œá ‚àò œÉ)) (cft (‚áëComplex.ofReal ‚àò (a - Function.const Œ± (expect univ fun x => a x))))‚Äñ := by
        rw [l2Inner_cft]
      _ ‚â§ (Fintype.card Œ± / Fintype.card Œ≤ : ‚Ñù) * (‚Äñcft (œá ‚àò œÉ)‚Äñ_[1] * ‚Äñcft (‚áëComplex.ofReal ‚àò (a - Function.const Œ± (expect univ fun x => a x)))‚Äñ_[‚ä§]) := by
        gcongr
        apply l2Inner_le_l1Norm_mul_linftyNorm
      _ ‚â§ (Fintype.card Œ± / Fintype.card Œ≤ : ‚Ñù) * (t * (Œµ / (Fintype.card Œ±))) := by
        gcongr
        apply h‚ÇÇ
        rw [linftyNorm_eq_ciSup]
        apply ciSup_le
        intro œà
        by_cases hœà : œà = 0
        ¬∑ simp only [map_comp_sub, Function.comp_const, Complex.ofReal_eq_coe,
          Complex.ofReal_expect, hœà, cft_apply, AddChar.coe_zero, Complex.norm_eq_abs]
          change Complex.abs (nl2Inner (Function.const Œ± 1) _) ‚â§ _
          rw [nl2Inner_const_left]
          simp [expect_sub_distrib]
          positivity
        ¬∑ simp only [map_comp_sub, Function.comp_const, Complex.ofReal_eq_coe,
          Complex.ofReal_expect, cft_sub, Pi.sub_apply]
          rw [cft_const]
          simp only [sub_zero]
          apply h
          exact (AddChar.isNontrivial_iff_ne_trivial _).mpr hœà
          exact hœà
      _ = t * Œµ / (Fintype.card Œ≤) := by
        field_simp
        ring_nf


variable (n m : ‚Ñï+) (h‚Çò : m ‚â§ n)

local notation "Œ±" => ZMod n
local notation "Œ≤" => ZMod m
def lemma44C : ‚Ñù := 1

lemma range_eq_zmod_image : range ‚Üën = image (fun t => ZMod.val t) (univ : Finset Œ±) := by
  ext x
  simp only [mem_range, mem_image, mem_univ, true_and]
  constructor
  intro v
  exists x
  simp only [ZMod.val_nat_cast]
  apply Nat.mod_eq_of_lt v
  rintro ‚ü®a, ha‚ü©
  rw [‚Üê ha]
  apply ZMod.val_lt

theorem lemma44 (œá : AddChar Œ≤ ‚ÑÇ) : ‚Äñcft (œá ‚àò (fun x : Œ± => (x.val : Œ≤)))‚Äñ_[1] ‚â§ lemma44C * Real.log n := by
  simp_rw [l1Norm_eq_sum, cft_apply, nl2Inner, expect]
  simp only [Function.comp_apply, ‚Üê nnratCast_smul_eq_nnqsmul ‚ÑÇ, NNRat.cast_inv, NNRat.cast_natCast,
    smul_eq_mul, norm_mul, norm_inv, Complex.norm_nat]
  simp_rw [‚Üê AddChar.map_neg_eq_conj, ‚Üê mul_sum]
  let w := (AddChar.zmodAddEquiv (n := m) (by simp)).symm œá
  have (y) : œá y = (AddChar.zmod m w) y := by
    have : œá = AddChar.zmodAddEquiv (n := m) (by simp) w := by unfold_let w; simp
    simp [this]
    rfl
  simp_rw [this]
  rw [‚Üê Equiv.sum_comp (Œπ := Œ±) (Œ∫ := AddChar Œ± ‚ÑÇ) (AddChar.zmodAddEquiv (n := n) (by simp))]
  conv =>
    lhs
    rhs
    rhs
    intro t
    rhs
    rhs
    intro x
    tactic =>
      simp only [EquivLike.coe_coe, AddChar.zmodAddEquiv_apply]
      change ((AddChar.zmod n t) (-x) * (AddChar.zmod m w) (x.val) : circle) = (_ : ‚ÑÇ)
      convert_to ((AddChar.zmod n (t.val : ‚Ñ§)) (- x.val : ‚Ñ§) * (AddChar.zmod m (w.val : ‚Ñ§)) (x.val : ‚Ñ§) : circle) = (_ : ‚ÑÇ)
      congr <;> simp
      simp only [AddChar.zmod_apply]
      simp only [ZMod.nat_cast_val, ZMod.int_cast_cast, Int.cast_neg, mul_neg, ‚Üê
        AddChar.map_add_mul]
      convert_to Circle.e (x.val * (w.val * n - t.val * m) / (n * m)) = (_ : ‚ÑÇ)
      congr
      simp only [ZMod.nat_cast_val]
      field_simp
      ring
      rfl
  calc (univ.card : ‚Ñù)‚Åª¬π * ‚àë t : Œ±, ‚Äñ‚àë x : Œ±, (Circle.e (x.val * (w.val * n - t.val * m) / (n * m)) : ‚ÑÇ)‚Äñ
    _ = (n : ‚Ñù)‚Åª¬π * ‚àë t ‚àà Finset.range n, ‚Äñ‚àë x : Œ±,
        (Circle.e (x.val * (w.val * n - t * m) / (n * m)) : ‚ÑÇ)‚Äñ := by
      congr 1
      simp [card_univ]
      apply Eq.symm
      convert Finset.sum_image ?_
      apply range_eq_zmod_image
      intro x _ y _ v
      apply ZMod.val_injective n v
    _ = (n : ‚Ñù)‚Åª¬π * ‚àë t ‚àà Finset.range n, ‚Äñ‚àë x ‚àà Finset.range n,
        (Circle.e (x * (w.val * n - t * m) / (n * m)) : ‚ÑÇ)‚Äñ := by
      congr
      ext t
      congr 1
      apply Eq.symm
      convert Finset.sum_image ?_
      apply range_eq_zmod_image
      intro x _ y _ v
      apply ZMod.val_injective n v
    _ ‚â§ lemma44C * Real.log n := sorry


-- theorem XOR_abelian (Œµ : ‚Ñù‚â•0)
--   (a : FinPMF Œ±) (h : ‚àÄ œá : AddChar Œ± ‚ÑÇ, (AddChar.IsNontrivial œá) ‚Üí ‚Äñdft (a ¬∑) œá‚Äñ ‚â§ Œµ) :
--   SD (a.apply fun x => (x.val : Œ≤)) (Uniform ‚ü®univ, univ_nonempty‚ü©) ‚â§
--     abelianC * (Œµ * Real.sqrt m * Real.log n + m / n) := by

--   sorry
