import Pseudorandom.SD
import Mathlib.Analysis.SpecialFunctions.Log.Base
import Mathlib.Algebra.Order.Chebyshev
import LeanAPAP.Prereqs.Discrete.DFT.Compact
import LeanAPAP.Prereqs.Expect.Basic

open Classical Real Finset BigOps

variable
   {Œ± : Type*} [Œ±nonempty: Nonempty Œ±] [Fintype Œ±] [AddCommGroup Œ±]
   {Œ≤ : Type*} [Nonempty Œ≤] [Fintype Œ≤] [AddCommGroup Œ≤]
   [RCLike ùïú]
   (a b : Œ± ‚Üí ùïú)

open scoped NNReal

-- The DFT isn't normalized.
theorem l1Norm_le_sqrt_card_mul_l2Norm :
  ‚Äña‚Äñ_[1] ‚â§ Real.sqrt (Fintype.card Œ±) * ‚Äña‚Äñ_[2] := calc
    ‚Äña‚Äñ_[1] = ‚Äñ1 * a‚Äñ_[1] := by simp
    _ ‚â§ ‚Äñ1‚Äñ_[(2 : NNReal)] * ‚Äña‚Äñ_[2] := by
      apply l1Norm_mul_le
      rw [NNReal.isConjExponent_iff_eq_conjExponent]
      rw [NNReal.sub_def]
      norm_num
      norm_num
    _ = Real.sqrt (Fintype.card Œ±) * ‚Äña‚Äñ_[2] := by
      congr
      rw [lpNorm_one (p := 2), Real.sqrt_eq_rpow]
      norm_num
      norm_num

lemma lpNorm_eq_card_rpow_mul_nlpNorm (p : NNReal) (hp : p ‚â† 0) :
    ‚Äña‚Äñ_[p] = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ‚Çô_[p] := calc
  ‚Äña‚Äñ_[p] = (‚àë i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := lpNorm_eq_sum hp ..
  _ = (Fintype.card Œ± * ùîº i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    simp only [Fintype.card_mul_expect]
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * (ùîº i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    rw [mul_rpow]
    simp
    apply expect_nonneg
    intros
    apply rpow_nonneg
    simp
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ‚Çô_[p] := by
    rw [nlpNorm_eq_expect hp]

lemma lpNorm_le_card_rpow_mul_linftyNorm (p : NNReal) (hp : p ‚â† 0) :
    ‚Äña‚Äñ_[p] ‚â§ (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ_[‚ä§] := calc
  ‚Äña‚Äñ_[p] = (‚àë i, ‚Äña i‚Äñ ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := lpNorm_eq_sum hp ..
  _ ‚â§ (‚àë __, ‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    gcongr with i
    rw [linftyNorm_eq_ciSup]
    apply le_ciSup (c := i)
    simp [Set.Finite.bddAbove, Set.finite_range]
  _ = (Fintype.card Œ± * ‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    simp; rfl
  _ ‚â§ (Fintype.card Œ±)^(p.toReal‚Åª¬π) * (‚Äña‚Äñ_[‚ä§] ^ (p.toReal)) ^ (p.toReal‚Åª¬π) := by
    rw [mul_rpow]
    simp
    apply rpow_nonneg
    simp
  _ = (Fintype.card Œ±)^(p.toReal‚Åª¬π) * ‚Äña‚Äñ_[‚ä§] := by
    congr
    rw [‚Üê rpow_mul]
    field_simp
    simp

variable
   (a b : Œ± ‚Üí ‚Ñù)

theorem L1_le_card_rpow_mul_dft_norm :
    ‚Äña‚Äñ_[1] ‚â§ ((Fintype.card Œ±)^(3/2 : ‚Ñù) : ‚Ñù) * ‚Äñcft (a ¬∑)‚Äñ_[‚ä§] :=
  calc
    ‚Äña‚Äñ_[1] ‚â§ Real.sqrt (Fintype.card Œ±) * ‚Äña‚Äñ_[(2 : NNReal)] := l1Norm_le_sqrt_card_mul_l2Norm ..
    _ = (Fintype.card Œ±) * ‚Äña‚Äñ‚Çô_[2] := by
      rw [lpNorm_eq_card_rpow_mul_nlpNorm]
      rw [‚Üê mul_assoc]
      congr
      rw [Real.sqrt_eq_rpow, ‚Üê rpow_add]
      norm_num
      simp [Fintype.card_pos]
      norm_num
    _ = (Fintype.card Œ±) * ‚Äñcft (a ¬∑)‚Äñ_[2] := by
      congr
      rw [l2Norm_cft, nlpNorm_eq_expect', nlpNorm_eq_expect']
      congr
      ext
      simp
      simp
      simp
    _ ‚â§ (Fintype.card Œ±) * (Real.sqrt (Fintype.card Œ±) * ‚Äñcft (a ¬∑)‚Äñ_[‚ä§]) := by
      gcongr
      rw [Real.sqrt_eq_rpow]
      convert lpNorm_le_card_rpow_mul_linftyNorm (cft (a ¬∑)) 2 (by norm_num) using 3
      simp
      simp
    _ = ((Fintype.card Œ±)^(3/2 : ‚Ñù) : ‚Ñù) * ‚Äñcft (a ¬∑)‚Äñ_[‚ä§] := by
      rw [sqrt_eq_rpow, ‚Üê mul_assoc, ‚Üê rpow_one_add']
      congr 1
      norm_num
      simp
      norm_num

lemma lemma43 (t : ‚Ñù) (Œµ : ‚Ñù)
    (h : ‚àÄ œá : AddChar Œ± ‚ÑÇ, (AddChar.IsNontrivial œá) ‚Üí ‚Äñdft (a ¬∑) œá‚Äñ ‚â§ Œµ)
    (œÉ : Œ± ‚Üí Œ≤) (h‚ÇÇ : ‚àÄ œá : AddChar Œ≤ ‚ÑÇ,
      ‚Äñcft (œá ‚àò œÉ)‚Äñ_[1] ‚â§ t / (Fintype.card Œ±)
    ):
    ‚ÄñœÉ # a - œÉ # (fun (x : Œ±) => 1 / (Fintype.card Œ± : ‚Ñù))‚Äñ_[1] ‚â§ t * Œµ * Real.sqrt (Fintype.card Œ≤)
  := by

  sorry

variable (n m : ‚Ñï+) (h‚Çò : m ‚â§ n)

local notation "Œ±" => ZMod n
local notation "Œ≤" => ZMod m

def abelianC : ‚Ñù := 1

theorem XOR_abelian (Œµ : ‚Ñù‚â•0)
  (a : FinPMF Œ±) (h : ‚àÄ œá : AddChar Œ± ‚ÑÇ, (AddChar.IsNontrivial œá) ‚Üí ‚Äñdft (a ¬∑) œá‚Äñ ‚â§ Œµ) :
  SD (a.apply fun x => (x.val : Œ≤)) (Uniform ‚ü®univ, univ_nonempty‚ü©) ‚â§
    abelianC * (Œµ * Real.sqrt m * Real.log n + m / n) := by

  sorry
